This is part number 2


Causes the parallel invocation to run as a PowerShell job. A single job object is returned instead of output from the running script blocks. The job object contains child jobs for each parallel script block that runs. The job object can be used by all PowerShell job cmdlets, to monitor running state and retrieve data. This parameter was introduced in PowerShell 7.0.

Type: SwitchParameter

Position: Named

Default value: None

Accept pipeline input: False

Accept wildcard characters: False

-Begin

Specifies a script block that runs before this cmdlet processes any input objects. This script block is only run once for the entire pipeline. For more information about the begin block, see about_Functions.

Type: ScriptBlock

Position: Named

Default value: None

Accept pipeline input: False

Accept wildcard characters: False

-Confirm

Prompts you for confirmation before running the cmdlet.

Type: SwitchParameter

Aliases: cf

Position: Named

Default value: False

Accept pipeline input: False

Accept wildcard characters: False

-End

Specifies a script block that runs after this cmdlet processes all input objects. This script block is only run once for the entire pipeline. For more information about the end block, see about_Functions.

Type: ScriptBlock

Position: Named

Default value: None

Accept pipeline input: False

Accept wildcard characters: False

-InputObject

Specifies the input objects. ForEach-Object runs the script block or operation statement on each input object. Enter a variable that contains the objects, or type a command or expression that gets the objects. When you use the InputObject parameter with ForEach-Object, instead of piping command results to ForEach-Object, the InputObject value is treated as a single object. This is true even if the value is a collection that is the result of a command, such as -InputObject (Get-Process). Because InputObject cannot return individual properties from an array or collection of objects, we recommend that if you use ForEach-Object to perform operations on a collection of objects for those objects that have specific values in defined properties, you use ForEach-Object in the pipeline, as shown in the examples in this topic.

Type: PSObject

Position: Named

Default value: None

Accept pipeline input: True

Accept wildcard characters: False

-MemberName

Specifies the property to get or the method to call. Wildcard characters are permitted, but work only if the resulting string resolves to a unique value. For example, if you run Get-Process | ForEach -MemberName *Name, the wildcard pattern matches more than one member causing the command to fail. This parameter was introduced in Windows PowerShell 3.0.

Type: String

Position: 0

Default value: None

Accept pipeline input: False

Accept wildcard characters: True

-Parallel

Specifies the script block to be used for parallel processing of input objects. Enter a script block that describes the operation. This parameter was introduced in PowerShell 7.0.

Type: ScriptBlock

Position: Named

Default value: None

Accept pipeline input: False

Accept wildcard characters: False

-Process

Specifies the operation that is performed on each input object. This script block is run for every object in the pipeline. For more information about the process block, see about_Functions. When you provide multiple script blocks to the Process parameter, the first script block is always mapped to the begin block. If there are only two script blocks, the second block is mapped to the process block. If there are three or more script blocks, first script block is always mapped to the begin block, the last block is mapped to the end block, and the blocks in between are all mapped to the process block.

Type:

ScriptBlock[]

Position: 0

Default value: None

Accept pipeline input: False

Accept wildcard characters: False

-RemainingScripts

Specifies all script blocks that are not taken by the Process parameter. This parameter was introduced in Windows PowerShell 3.0.

Type:

ScriptBlock[]

Position: Named

Default value: None

Accept pipeline input: False

Accept wildcard characters: False

-ThrottleLimit

Specifies the number of script blocks that in parallel. Input objects are blocked until the running script block count falls below the ThrottleLimit. The default value is 5. The ThrottleLimit parameter limits the number of parallel scripts running during each instance of ForEach-Object -Parallel. It does not limit the number of jobs that can be created when using the AsJob parameter. Since jobs themselves run concurrently, it is possible to create a number of parallel jobs, each running up to the throttle limit number of concurrent scriptblocks. This parameter was introduced in PowerShell 7.0.

Type: Int32

Position: Named

Default value: 5

Accept pipeline input: False

Accept wildcard characters: False

-TimeoutSeconds

Specifies the number of seconds to wait for all input to be processed in parallel. After the specified timeout time, all running scripts are stopped. And any remaining input objects to be processed are ignored. Default value of 0 disables the timeout, and ForEach-Object -Parallel can run indefinitely. Typing Ctrl+C at the command line stops a running ForEach-Object -Parallel command. This parameter cannot be used along with the AsJob parameter. This parameter was introduced in PowerShell 7.0.

Type: Int32

Position: Named

Default value: 0

Accept pipeline input: False

Accept wildcard characters: False

-UseNewRunspace

Causes the parallel invocation to create a new runspace for every loop iteration instead of reusing runspaces from the runspace pool. This parameter was introduced in PowerShell 7.1

Type: SwitchParameter

Position: Named

Default value: False

Accept pipeline input: False

Accept wildcard characters: False

-WhatIf

Shows what would happen if the cmdlet runs. The cmdlet is not run.

Type: SwitchParameter

Aliases: wi

Position: Named

Default value: False

Accept pipeline input: False

Accept wildcard characters: False

Inputs PSObject You can pipe any object to this cmdlet.

Outputs PSObject This cmdlet returns objects that are determined by the input.

Notes PowerShell includes the following aliases for ForEach-Object:

All Platforms:

% foreach

The ForEach-Object cmdlet works much like the Foreach statement, except that you cannot pipe input to a Foreach statement. For more information about the Foreach statement, see about_Foreach. Starting in PowerShell 4.0, Where and ForEach methods were added for use with collections. You can read more about these new methods here about_arrays Using ForEach-Object -Parallel:

The ForEach-Object -Parallel parameter set uses PowerShell's internal API to run each script block in a new runspace. This is significantly more overhead than running ForEach-Object normally with sequential processing. It is important to use Parallel where the overhead of running in parallel is small compared to work the script block performs. For example:

Compute intensive scripts on multi-core machines Scripts that spend time waiting for results or doing file operations

Using the Parallel parameter can cause scripts to run much slower than normal. Especially if the parallel scripts are trivial. Experiment with Parallel to discover where it can be beneficial.

When running in parallel, objects decorated with ScriptProperties or ScriptMethods cannot be guaranteed to function correctly if they are run in a different runspace than the scripts were originally attached to them. Scriptblock invocation always attempts to run in its home runspace, regardless of where it's actually invoked. However, ForEach-Object -Parallel creates temporary runspaces that get deleted after use, so there's no runspace for the scripts to execute in anymore. This behavior can work as long as the home runspace still exists. However, you may not get the desired result if the script is dependent on external variables that are only present in the caller's runspace and not the home runspace.

Non-terminating errors are written to the cmdlet error stream as they occur in parallel running scriptblocks. Because parallel scriptblock execution order is non-deterministic, the order in which errors appear in the error stream is random. Likewise, messages written to other data streams, like warning, verbose, or information are written to those data streams in an indeterminate order. Terminating errors, such as exceptions, terminate the individual parallel instance of the scriptblocks in which they occur. A terminating error in one scriptblocks may not cause the termination of the Foreach-Object cmdlet. The other scriptblocks, running in parallel, continue to run unless they also encounter a terminating error. The terminating error is written to the error data stream as an ErrorRecord with a FullyQualifiedErrorId of PSTaskException. Terminating errors can be converted to non-terminating errors using PowerShell try/catch or trap blocks.

PipelineVariable common parameter variables are not supported in parallel scenarios even with the $using: keyword.

Important The ForEach-Object -Parallel parameter set runs script blocks in parallel on separate process threads. The $using: keyword allows passing variable references from the cmdlet invocation thread to each running script block thread. Since the script blocks run in different threads, the object variables passed by reference must be used safely. Generally it is safe to read from referenced objects that don't change. But if the object state is being modified then you must used thread safe objects, such as .NET System.Collection.Concurrent types (See Example 11).

Related Links

Compare-Object Where-Object Group-Object Measure-Object New-Object Select-Object Sort-Object Tee-Object

Feedback

Submit and view feedback for

This product

This page

View all page feedback

Theme

Light

Dark

High contrast

Previous Versions

Blog

Contribute

Privacy

Terms of Use

Trademarks

© Microsoft 2023

Additional resources

In this article

Theme

Light

Dark

High contrast

Previous Versions

Blog

Contribute

Privacy

Terms of Use

Trademarks

© Microsoft 2023
