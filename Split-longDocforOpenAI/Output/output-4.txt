Provide a detailed summary of the following script This is part number 4

                Start-Sleep 5
                Get-ChildItem 'Cert:\LocalMachine\My\' | ? { $_.Issuer -match "MS-Organization-Access|MS-Organization-P2P-Access \[\d+\]" } | % {
                    Write-Host "Removing leftover Hybrid-Join certificate $($_.DnsNameList.Unicode)" -ForegroundColor Cyan
                    Remove-Item $_.PSPath
                }

                $dsreg = dsregcmd.exe /status
                if (!(($dsreg | Select-String "AzureAdJoined :") -match "NO")) {
                    throw "$env:COMPUTERNAME is still joined to Azure. Run again"
                }

                # join computer to Azure again
                "Joining $env:COMPUTERNAME to Azure"
                Write-Verbose "by running: Get-ScheduledTask -TaskName Automatic-Device-Join | Start-ScheduledTask"
                Get-ScheduledTask -TaskName "Automatic-Device-Join" | Start-ScheduledTask
                while ((Get-ScheduledTask "Automatic-Device-Join" -ErrorAction silentlyContinue).state -ne "Ready") {
                    Start-Sleep 1
                    "Waiting for sched. task 'Automatic-Device-Join' to complete"
                }
                if ((Get-ScheduledTask -TaskName "Automatic-Device-Join" | Get-ScheduledTaskInfo | select -exp LastTaskResult) -ne 0) {
                    throw "Sched. task Automatic-Device-Join failed. Is $env:COMPUTERNAME synchronized to AzureAD?"
                }

                # check certificates
                "Waiting for certificate creation"
                $i = 30
                Write-Verbose "two certificates should be created in Computer Personal cert. store (issuer: MS-Organization-Access, MS-Organization-P2P-Access [$(Get-Date -Format yyyy)]"

                Start-Sleep 3

                while (!($hybridJoinCert = Get-ChildItem 'Cert:\LocalMachine\My\' | ? { $_.Issuer -match "MS-Organization-Access|MS-Organization-P2P-Access \[\d+\]" }) -and $i -gt 0) {
                    Start-Sleep 3
                    --$i
                    $i
                }

                # check AzureAd join status
                $dsreg = dsregcmd.exe /status
                if (($dsreg | Select-String "AzureAdJoined :") -match "YES") {
                    ++$AzureAdJoined
                }

                if ($hybridJoinCert -and $AzureAdJoined) {
                    "$env:COMPUTERNAME was successfully joined to AAD again."
                } else {
                    $problem = @()

                    if (!$AzureAdJoined) {
                        $problem += " - computer is not AzureAD joined"
                    }

                    if (!$hybridJoinCert) {
                        $problem += " - certificates weren't created"
                    }

                    Write-Error "Join wasn't successful:`n$($problem -join "`n")"
                    Write-Warning "Check if device $env:COMPUTERNAME exists in AAD"
                    Write-Warning "Run:`ngpupdate /force /target:computer"
                    Write-Warning "You can get failure reason via manual join by running: Invoke-AsSystem -scriptBlock {dsregcmd /join /debug} -returnTranscript"
                    throw 1
                }
            }
            argumentList = $allFunctionDefs
        }

        if ($computerName -and $computerName -notin "localhost", $env:COMPUTERNAME) {
            $param.computerName = $computerName
        } else {
            if (! ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
                throw "You don't have administrator rights"
            }
        }

        Invoke-Command @param
    }

    function Get-IntuneEnrollmentStatus {
        <#
        .SYNOPSIS
        Function for checking whether computer is managed by Intune (fulfill all requirements).

        .DESCRIPTION
        Function for checking whether computer is managed by Intune (fulfill all requirements).
        What is checked:
        - device is AAD joined
        - device is joined to Intune
        - device has valid Intune certificate
        - device has Intune sched. tasks
        - device has Intune registry keys
        - Intune service exists

        Returns true or false.

        .PARAMETER computerName
        (optional) name of the computer to check.

        .PARAMETER checkIntuneToo
        Switch for checking Intune part too (if device is listed there).

        .EXAMPLE
        Get-IntuneEnrollmentStatus

        Check Intune status on local computer.

        .EXAMPLE
        Get-IntuneEnrollmentStatus -computerName ae-50-pc

        Check Intune status on computer ae-50-pc.

        .EXAMPLE
        Get-IntuneEnrollmentStatus -computerName ae-50-pc -checkIntuneToo

        Check Intune status on computer ae-50-pc, plus connects to Intune and check whether ae-50-pc exists there.
        #>

        [CmdletBinding()]
        param (
            [string] $computerName,

            [switch] $checkIntuneToo
        )

        if (!$computerName) { $computerName = $env:COMPUTERNAME }

        #region get Intune data
        if ($checkIntuneToo) {
            $ErrActionPreference = $ErrorActionPreference
            $ErrorActionPreference = "Stop"

            try {
                if (Get-Command Get-ADComputer -ErrorAction SilentlyContinue) {
                    $ADObj = Get-ADComputer -Filter "Name -eq '$computerName'" -Properties Name, ObjectGUID
                } else {
                    Write-Verbose "Get-ADComputer command is missing, unable to get device GUID"
                }

                Connect-Graph

                $intuneObj = @()

                $intuneObj += Get-IntuneManagedDevice -Filter "DeviceName eq '$computerName'"

                if ($ADObj.ObjectGUID) {
                    # because of bug? computer can be listed under guid_date name in cloud
                    $intuneObj += Get-IntuneManagedDevice -Filter "azureADDeviceId eq '$($ADObj.ObjectGUID)'" | ? DeviceName -NE $computerName
                }
            } catch {
                Write-Warning "Unable to get information from Intune. $_"

                # to avoid errors that device is missing from Intune
                $intuneObj = 1
            }

            $ErrorActionPreference = $ErrActionPreference
        }
        #endregion get Intune data

        $scriptBlock = {
            param ($checkIntuneToo, $intuneObj)

            $intuneNotJoined = 0

            #region Intune checks
            if ($checkIntuneToo) {
                if (!$intuneObj) {
                    ++$intuneNotJoined
                    Write-Warning "Device is missing from Intune!"
                }

                if ($intuneObj.count -gt 1) {
                    Write-Warning "Device is listed $($intuneObj.count) times in Intune"
                }

                $wrongIntuneName = $intuneObj.DeviceName | ? { $_ -ne $env:COMPUTERNAME }
                if ($wrongIntuneName) {
                    Write-Warning "Device is named as $wrongIntuneName in Intune"
                }

                $correctIntuneName = $intuneObj.DeviceName | ? { $_ -eq $env:COMPUTERNAME }
                if ($intuneObj -and !$correctIntuneName) {
                    ++$intuneNotJoined
                    Write-Warning "Device has no record in Intune with correct device name"
                }
            }
            #endregion Intune checks

            #region dsregcmd checks
            $dsregcmd = dsregcmd.exe /status
            $azureAdJoined = $dsregcmd | Select-String "AzureAdJoined : YES"
            if (!$azureAdJoined) {
                ++$intuneNotJoined
                Write-Warning "Device is NOT AAD joined"
            }

            $tenantName = $dsregcmd | Select-String "TenantName : .+"
            $MDMUrl = $dsregcmd | Select-String "MdmUrl : .+"
            if (!$tenantName -or !$MDMUrl) {
                ++$intuneNotJoined
                Write-Warning "Device is NOT Intune joined"
            }
            #endregion dsregcmd checks

            #region certificate checks
            $MDMCert = Get-ChildItem 'Cert:\LocalMachine\My\' | ? Issuer -EQ "CN=Microsoft Intune MDM Device CA"
            if (!$MDMCert) {
                ++$intuneNotJoined
                Write-Warning "Intune certificate is missing"
            } elseif ($MDMCert.NotAfter -lt (Get-Date) -or $MDMCert.NotBefore -gt (Get-Date)) {
                ++$intuneNotJoined
                Write-Warning "Intune certificate isn't valid"
            }
            #endregion certificate checks

            #region sched. task checks
            $MDMSchedTask = Get-ScheduledTask | ? { $_.TaskPath -like "*Microsoft*Windows*EnterpriseMgmt\*" -and $_.TaskName -eq "PushLaunch" }
